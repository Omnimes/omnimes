generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Model reprezentujący konto.
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// Model reprezentujący sesję.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// Model reprezentujący prośbę o role developera.
model RoleRequest {
  userId    String   @id
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("role_requests")
}

/// Model reprezentujący tabelę z tokenami weryfikacyjnymi.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// Model reprezentujący użytkownika.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  phoneNumber   String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  accounts     Account[]
  roleRequests RoleRequest?
  sessions     Session[]

  company   Company? @relation("UserCompany", fields: [companyId], references: [id])
  companyId String?

  adminCompany   Company? @relation("AdminCompany", fields: [adminCompanyId], references: [id])
  adminCompanyId String?

  companyRequest CompanyRequest?  // Relacja do CompanyRequest

  @@map("users")
}

/// Model reprezentujący firmę.
model Company {
  id            String @id @default(cuid())
  // dane
  name          String @default("")
  nip           String @unique
  streetAddress String @default("")
  postalCode    String @default("")
  city          String @default("")
  country       String @default("")
  industry      String @default("")
  // kontakt
  phoneNumber   String @default("")
  email         String @default("")
  website       String @default("")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  users  User[] @relation("UserCompany")
  admins User[] @relation("AdminCompany")

  companyRequests CompanyRequest[] // Relacja do CompanyRequest

  @@map("companies")
}

/// Model reprezentujący prośbę o dodanie do firmy.
model CompanyRequest {
  id        String   @id @default(cuid())
  userId    String   @unique
  companyId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("company_requests")
}